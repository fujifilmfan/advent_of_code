"""
Day 5: Print Queue
==================
- index of item in list
- set operations
- control flow
- while loops
"""

sample = [
    "47|53",
    "97|13",
    "97|61",
    "97|47",
    "75|29",
    "61|13",
    "75|53",
    "29|13",
    "97|29",
    "53|29",
    "61|53",
    "97|53",
    "61|29",
    "47|13",
    "75|47",
    "97|75",
    "47|61",
    "75|61",
    "47|29",
    "75|13",
    "53|13",
    "",
    "75,47,61,53,29",
    "97,61,53,29,13",
    "75,29,13",
    "75,97,47,61,53",
    "61,13,29",
    "97,13,75,29,47",
]


puzzle_input = []
with open("day5_input.txt") as f:
    for line in f:
        puzzle_input.append(line.rstrip())


def separate_input(text: list) -> tuple:
    """Separate rules from updates.

    :param list text: list of strings with empty string used as a separator
    :return: tuple of two lists
    """
    split = text.index("")  # 21
    rules = text[:split]
    updates = text[split + 1 :]
    updates = [[int(x) for x in update.split(",")] for update in updates]
    return rules, updates


def determine_page_order(page_ordering_rules: list) -> dict:
    """Determine page order using sets.

    sorted_page_order = {
        1: 97,
        2: 75,
        3: 47,
        4: 61,
        5: 53,
        6: 29,
        7: 13,
    }
    :param list page_ordering_rules: strings of the form "int|int"
    :return: dictionary in which keys indicate page order
    """
    page_order = {}

    def find_first_last(rules_to_split: list) -> tuple:
        before = set()
        after = set()
        for rule in rules_to_split:
            left, right = rule.split("|")
            before.add(int(left))
            after.add(int(right))

        all_pages = before | after
        num_pages = len(all_pages)

        # If the rules are logically consistent, then the page that must always
        # be first must always be left of the "|", and the page that must always
        # be last must always be right of the "|". There can only be one of each.
        first = before.difference(after).pop()
        last = after.difference(before).pop()
        common = before.intersection(after)

        filtered_rules = [
            rule for rule in rules if f"{first}|" not in rule and f"|{last}" not in rule
        ]

        return first, last, num_pages, filtered_rules, common

    beg_index = 1
    end_index = 0
    rules = page_ordering_rules
    while rules:
        (
            first_page,
            last_page,
            number_of_pages,
            remaining_rules,
            remaining_nums,
        ) = find_first_last(rules)
        if number_of_pages > end_index:
            end_index = number_of_pages
        rules = remaining_rules
        page_order[first_page] = beg_index
        page_order[last_page] = end_index
        if len(remaining_nums) == 1:
            page_order[remaining_nums.pop()] = beg_index + 1
        beg_index += 1
        end_index -= 1

    # sorted_page_order = dict(sorted(unsorted_page_order.items()))
    return page_order


def find_correct_updates(page_order: dict, updates: list) -> list:
    """Determine if the updates are correct.

    :param dict page_order: dictionary with page order
    :param list updates: list of strings with comma-separated integers
    :return: list of correct updates
    """
    correct_updates = []
    for update in updates:
        current_index = 0
        correct = True
        for i in update:
            if page_order[i] <= current_index:
                correct = False
                break
            current_index = page_order[i]
        if correct is True:
            correct_updates.append(update)

    return correct_updates


def find_middle_sum(updates: list) -> int:
    """Find the sum of the middle elements of the updates.

    :param list updates: list of lists of integers
    :return: sum of the middle elements
    """
    middle_elements = []
    for update in updates:
        middle_index = len(update) // 2
        middle_elements.append(update[middle_index])

    return sum(middle_elements)


sample_rules, sample_updates = separate_input(sample)
sample_page_order = determine_page_order(sample_rules)
print(sample_page_order)
correct_sample_updates = find_correct_updates(sample_page_order, sample_updates)
print(correct_sample_updates)
sample_sum = find_middle_sum(correct_sample_updates)
print(sample_sum)


def validate_updates(rules: list, updates: list) -> tuple[list, list]:
    """Validate the updates.
    :param list rules: strings of the form "int|int"
    :param list updates: strings with comma-separated integers
    :return: tuple containing correct and incorrect updates
    """
    correct_updates = []
    incorrect_updates = []
    for update in updates:
        page_total = len(update)
        correct = True
        for i in range(page_total - 1):
            forward_rule = f"{update[i]}|{update[i + 1]}"
            reverse_rule = f"{update[i + 1]}|{update[i]}"
            if forward_rule in rules:
                continue
            elif reverse_rule in rules:
                correct = False
                incorrect_updates.append(update)
                break
            else:
                print(f"Rule not found: {forward_rule} or {reverse_rule}")

        if correct is True:
            correct_updates.append(update)

    print(len(correct_updates))
    print(len(incorrect_updates))

    return correct_updates, incorrect_updates


def fix_updates(rules: list, updates: list) -> tuple[list, list]:
    """Fix updates by switching two items.

    Run the function multiple times to fix all the updates.
        97,13,75,29,47
        97,75,13,29,47
        97,75,29,13,47
        97,75,29,47,13
        97,75,47,29,13

    Result of "printable":

    [63, 37, 68, 89, 24, 38, 11, 84, 27, 94, 92, 95, 93, 34, 64, 45, 35, 67, 57, 74, 26, 76, 47]
    [37, 63, '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', 24, 89, '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', 38, 89, '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', 38, 24, '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', 11, 89, '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', 11, 24, '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', 84, 89, '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', 84, 24, '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', 84, 11, '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', 84, 38, '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', 84, 68, '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', 27, 89, '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', 27, 24, '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', 27, 11, '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', 27, 38, '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', 27, 68, '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', 27, 84, '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', 94, 89, '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', 94, 24, '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', '', 92, 89, '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', 92, 24, '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', 92, 94, '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', 92, 11, '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', 92, 38, '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', 92, 68, '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', 92, 84, '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', 92, 27, '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', 92, 63, '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    [92, 37, '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', '', '', 95, 89, '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', '', 95, 24, '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', 95, 94, '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', 95, 11, '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', 95, 38, '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', 95, 68, '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', 95, 84, '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', '', '', '', 93, 89, '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', '', '', 93, 24, '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', '', 93, 94, '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', 93, 11, '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', 93, 38, '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', 93, 68, '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', '', '', '', '', 34, 89, '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', '', '', '', 34, 24, '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', '', '', 34, 94, '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', '', 34, 11, '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', 34, 38, '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', 34, 68, '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', 34, 93, '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', 34, 84, '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', 34, 95, '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', 34, 27, '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', '', '', '', '', '', 64, 89, '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', '', '', '', '', 64, 24, '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', '', '', '', 64, 94, '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', '', '', 64, 11, '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', '', 64, 38, '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', 64, 68, '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', 64, 93, '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', 64, 84, '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', 64, 95, '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', 64, 27, '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', 64, 34, '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', 64, 63, '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', 64, 37, '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', '', '', '', '', '', '', 45, 89, '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', '', '', '', '', '', 45, 24, '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', '', '', '', '', 45, 94, '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', '', '', '', 45, 11, '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', '', '', 45, 38, '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 35, 89, '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', '', '', '', '', '', '', 35, 24, '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', '', '', '', '', '', 35, 94, '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', '', '', '', '', 35, 11, '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', '', '', '', 35, 38, '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', '', '', 35, 45, '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 67, 89, '', '', '', '', '']
    ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 67, 24, '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', '', '', '', '', '', '', 67, 94, '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', '', '', '', '', '', 67, 11, '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', '', '', '', '', 67, 38, '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', '', '', '', 67, 45, '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', '', '', 67, 35, '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', '', 67, 68, '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', 67, 93, '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', 67, 84, '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', 67, 95, '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', 67, 27, '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 57, 89, '', '', '', '']
    ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 57, 24, '', '', '', '', '']
    ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 57, 94, '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', '', '', '', '', '', '', 57, 11, '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', '', '', '', '', '', 57, 38, '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', '', '', '', '', 57, 45, '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', '', '', '', 57, 35, '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', '', '', 57, 68, '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', '', 57, 93, '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', 57, 84, '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', 57, 95, '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', 57, 27, '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', 57, 67, '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', 57, 34, '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', 57, 63, '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', 57, 37, '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 74, 89, '', '', '']
    ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 74, 24, '', '', '', '']
    ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 74, 94, '', '', '', '', '']
    ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 74, 11, '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', '', '', '', '', '', '', 74, 38, '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', '', '', '', '', '', 74, 45, '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', '', '', '', '', 74, 35, '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', '', '', '', 74, 68, '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', '', '', 74, 93, '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', '', 74, 84, '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', 74, 95, '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', 74, 27, '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', 74, 67, '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', 74, 34, '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', 74, 63, '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', 74, 37, '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 26, 89, '', '']
    ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 26, 24, '', '', '']
    ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 26, 94, '', '', '', '']
    ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 26, 11, '', '', '', '', '']
    ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 26, 38, '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', '', '', '', '', '', '', 26, 45, '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', '', '', '', '', '', 26, 35, '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', '', '', '', '', 26, 68, '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', '', '', '', 26, 93, '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', '', '', 26, 84, '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', '', 26, 95, '', '', '', '', '', '', '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 76, 89, '']
    ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 76, 24, '', '']
    ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 76, 94, '', '', '']
    ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 76, 11, '', '', '', '']
    ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 76, 38, '', '', '', '', '']
    ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 76, 45, '', '', '', '', '', '']
    ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 47, 89]
    ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 47, 24, '']
    ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 47, 94, '', '']
    ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 47, 11, '', '', '']
    ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 47, 38, '', '', '', '']
    [92, 64, 57, 74, 37, 63, 34, 67, 27, 26, 95, 84, 93, 68, 35, 76, 45, 47, 38, 11, 94, 24, 89]

    :param list rules: strings of the form "int|int"
    :param list updates: strings with comma-separated integers
    :return: tuple containing correct and incorrect updates
    """
    correct_updates = []
    incorrect_updates = updates

    def switch_values(update):
        correct_update, incorrect_update = [], []
        page_total = len(update)
        correct = True
        for i in range(page_total - 1):
            forward_rule = f"{update[i]}|{update[i + 1]}"
            reverse_rule = f"{update[i + 1]}|{update[i]}"
            if forward_rule in rules:
                continue
            elif reverse_rule in rules:
                correct = False
                update[i], update[i + 1] = update[i + 1], update[i]
                printable = [
                    update[j] if j == i or j == i + 1 else "" for j in range(page_total)
                ]
                print(printable)
                incorrect_update.append(update)
                break
            else:
                print(f"Rule not found: {forward_rule} or {reverse_rule}")
        if correct is True:
            print(update)
            correct_update.append(update)

        return correct_update, incorrect_update

    iteration = 1
    while incorrect_updates:
        # print(f"Iteration {iteration}")  # 7332 iterations! Pretty inefficient.
        update_to_fix = incorrect_updates.pop()
        corrected, still_incorrect = switch_values(update_to_fix)
        correct_updates.extend(corrected)
        incorrect_updates.extend(still_incorrect)
        iteration += 1

    return correct_updates, incorrect_updates


# Part 1
puzzle_rules, puzzle_updates = separate_input(puzzle_input)
correct_puzzle_updates, incorrect_puzzle_updates = validate_updates(
    puzzle_rules, puzzle_updates
)
puzzle_sum = find_middle_sum(correct_puzzle_updates)
print(puzzle_sum)  # 6505 <-- correct

# Part 2
# longest_item = max(incorrect_puzzle_updates, key=len)
corrected_puzzle_updates, still_incorrect_puzzle_updates = fix_updates(
    puzzle_rules, incorrect_puzzle_updates
)
corrected_puzzle_sum = find_middle_sum(corrected_puzzle_updates)
print(corrected_puzzle_sum)  # 6897 <-- correct
